// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/loft-sh/api/v4/pkg/apis/storage/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SpaceTemplateLister helps list SpaceTemplates.
// All objects returned here must be treated as read-only.
type SpaceTemplateLister interface {
	// List lists all SpaceTemplates in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.SpaceTemplate, err error)
	// Get retrieves the SpaceTemplate from the index for a given name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.SpaceTemplate, error)
	SpaceTemplateListerExpansion
}

// spaceTemplateLister implements the SpaceTemplateLister interface.
type spaceTemplateLister struct {
	indexer cache.Indexer
}

// NewSpaceTemplateLister returns a new SpaceTemplateLister.
func NewSpaceTemplateLister(indexer cache.Indexer) SpaceTemplateLister {
	return &spaceTemplateLister{indexer: indexer}
}

// List lists all SpaceTemplates in the indexer.
func (s *spaceTemplateLister) List(selector labels.Selector) (ret []*v1.SpaceTemplate, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.SpaceTemplate))
	})
	return ret, err
}

// Get retrieves the SpaceTemplate from the index for a given name.
func (s *spaceTemplateLister) Get(name string) (*v1.SpaceTemplate, error) {
	obj, exists, err := s.indexer.GetByKey(name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("spacetemplate"), name)
	}
	return obj.(*v1.SpaceTemplate), nil
}
