// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/loft-sh/api/v4/pkg/apis/virtualcluster/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// HelmReleaseLister helps list HelmReleases.
// All objects returned here must be treated as read-only.
type HelmReleaseLister interface {
	// List lists all HelmReleases in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.HelmRelease, err error)
	// HelmReleases returns an object that can list and get HelmReleases.
	HelmReleases(namespace string) HelmReleaseNamespaceLister
	HelmReleaseListerExpansion
}

// helmReleaseLister implements the HelmReleaseLister interface.
type helmReleaseLister struct {
	indexer cache.Indexer
}

// NewHelmReleaseLister returns a new HelmReleaseLister.
func NewHelmReleaseLister(indexer cache.Indexer) HelmReleaseLister {
	return &helmReleaseLister{indexer: indexer}
}

// List lists all HelmReleases in the indexer.
func (s *helmReleaseLister) List(selector labels.Selector) (ret []*v1.HelmRelease, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.HelmRelease))
	})
	return ret, err
}

// HelmReleases returns an object that can list and get HelmReleases.
func (s *helmReleaseLister) HelmReleases(namespace string) HelmReleaseNamespaceLister {
	return helmReleaseNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// HelmReleaseNamespaceLister helps list and get HelmReleases.
// All objects returned here must be treated as read-only.
type HelmReleaseNamespaceLister interface {
	// List lists all HelmReleases in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.HelmRelease, err error)
	// Get retrieves the HelmRelease from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.HelmRelease, error)
	HelmReleaseNamespaceListerExpansion
}

// helmReleaseNamespaceLister implements the HelmReleaseNamespaceLister
// interface.
type helmReleaseNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all HelmReleases in the indexer for a given namespace.
func (s helmReleaseNamespaceLister) List(selector labels.Selector) (ret []*v1.HelmRelease, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.HelmRelease))
	})
	return ret, err
}

// Get retrieves the HelmRelease from the indexer for a given namespace and name.
func (s helmReleaseNamespaceLister) Get(name string) (*v1.HelmRelease, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("helmrelease"), name)
	}
	return obj.(*v1.HelmRelease), nil
}
