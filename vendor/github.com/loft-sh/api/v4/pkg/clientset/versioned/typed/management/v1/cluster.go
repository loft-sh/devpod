// Code generated by client-gen. DO NOT EDIT.

package v1

import (
	context "context"

	managementv1 "github.com/loft-sh/api/v4/pkg/apis/management/v1"
	scheme "github.com/loft-sh/api/v4/pkg/clientset/versioned/scheme"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	gentype "k8s.io/client-go/gentype"
)

// ClustersGetter has a method to return a ClusterInterface.
// A group's client should implement this interface.
type ClustersGetter interface {
	Clusters() ClusterInterface
}

// ClusterInterface has methods to work with Cluster resources.
type ClusterInterface interface {
	Create(ctx context.Context, cluster *managementv1.Cluster, opts metav1.CreateOptions) (*managementv1.Cluster, error)
	Update(ctx context.Context, cluster *managementv1.Cluster, opts metav1.UpdateOptions) (*managementv1.Cluster, error)
	// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
	UpdateStatus(ctx context.Context, cluster *managementv1.Cluster, opts metav1.UpdateOptions) (*managementv1.Cluster, error)
	Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error
	DeleteCollection(ctx context.Context, opts metav1.DeleteOptions, listOpts metav1.ListOptions) error
	Get(ctx context.Context, name string, opts metav1.GetOptions) (*managementv1.Cluster, error)
	List(ctx context.Context, opts metav1.ListOptions) (*managementv1.ClusterList, error)
	Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error)
	Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (result *managementv1.Cluster, err error)
	ListAccess(ctx context.Context, clusterName string, options metav1.GetOptions) (*managementv1.ClusterMemberAccess, error)
	ListMembers(ctx context.Context, clusterName string, options metav1.GetOptions) (*managementv1.ClusterMembers, error)
	ListVirtualClusterDefaults(ctx context.Context, clusterName string, options metav1.GetOptions) (*managementv1.ClusterVirtualClusterDefaults, error)
	GetAgentConfig(ctx context.Context, clusterName string, options metav1.GetOptions) (*managementv1.ClusterAgentConfig, error)
	GetAccessKey(ctx context.Context, clusterName string, options metav1.GetOptions) (*managementv1.ClusterAccessKey, error)

	ClusterExpansion
}

// clusters implements ClusterInterface
type clusters struct {
	*gentype.ClientWithList[*managementv1.Cluster, *managementv1.ClusterList]
}

// newClusters returns a Clusters
func newClusters(c *ManagementV1Client) *clusters {
	return &clusters{
		gentype.NewClientWithList[*managementv1.Cluster, *managementv1.ClusterList](
			"clusters",
			c.RESTClient(),
			scheme.ParameterCodec,
			"",
			func() *managementv1.Cluster { return &managementv1.Cluster{} },
			func() *managementv1.ClusterList { return &managementv1.ClusterList{} },
		),
	}
}

// ListAccess takes name of the cluster, and returns the corresponding managementv1.ClusterMemberAccess object, and an error if there is any.
func (c *clusters) ListAccess(ctx context.Context, clusterName string, options metav1.GetOptions) (result *managementv1.ClusterMemberAccess, err error) {
	result = &managementv1.ClusterMemberAccess{}
	err = c.GetClient().Get().
		Resource("clusters").
		Name(clusterName).
		SubResource("memberaccess").
		VersionedParams(&options, scheme.ParameterCodec).
		Do(ctx).
		Into(result)
	return
}

// ListMembers takes name of the cluster, and returns the corresponding managementv1.ClusterMembers object, and an error if there is any.
func (c *clusters) ListMembers(ctx context.Context, clusterName string, options metav1.GetOptions) (result *managementv1.ClusterMembers, err error) {
	result = &managementv1.ClusterMembers{}
	err = c.GetClient().Get().
		Resource("clusters").
		Name(clusterName).
		SubResource("members").
		VersionedParams(&options, scheme.ParameterCodec).
		Do(ctx).
		Into(result)
	return
}

// ListVirtualClusterDefaults takes name of the cluster, and returns the corresponding managementv1.ClusterVirtualClusterDefaults object, and an error if there is any.
func (c *clusters) ListVirtualClusterDefaults(ctx context.Context, clusterName string, options metav1.GetOptions) (result *managementv1.ClusterVirtualClusterDefaults, err error) {
	result = &managementv1.ClusterVirtualClusterDefaults{}
	err = c.GetClient().Get().
		Resource("clusters").
		Name(clusterName).
		SubResource("virtualclusterdefaults").
		VersionedParams(&options, scheme.ParameterCodec).
		Do(ctx).
		Into(result)
	return
}

// GetAgentConfig takes name of the cluster, and returns the corresponding managementv1.ClusterAgentConfig object, and an error if there is any.
func (c *clusters) GetAgentConfig(ctx context.Context, clusterName string, options metav1.GetOptions) (result *managementv1.ClusterAgentConfig, err error) {
	result = &managementv1.ClusterAgentConfig{}
	err = c.GetClient().Get().
		Resource("clusters").
		Name(clusterName).
		SubResource("agentconfig").
		VersionedParams(&options, scheme.ParameterCodec).
		Do(ctx).
		Into(result)
	return
}

// GetAccessKey takes name of the cluster, and returns the corresponding managementv1.ClusterAccessKey object, and an error if there is any.
func (c *clusters) GetAccessKey(ctx context.Context, clusterName string, options metav1.GetOptions) (result *managementv1.ClusterAccessKey, err error) {
	result = &managementv1.ClusterAccessKey{}
	err = c.GetClient().Get().
		Resource("clusters").
		Name(clusterName).
		SubResource("accesskey").
		VersionedParams(&options, scheme.ParameterCodec).
		Do(ctx).
		Into(result)
	return
}
