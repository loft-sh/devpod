// Code generated by client-gen. DO NOT EDIT.

package v1

import (
	"context"

	v1 "github.com/loft-sh/api/v4/pkg/apis/management/v1"
	scheme "github.com/loft-sh/api/v4/pkg/clientset/versioned/scheme"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	gentype "k8s.io/client-go/gentype"
)

// UsersGetter has a method to return a UserInterface.
// A group's client should implement this interface.
type UsersGetter interface {
	Users() UserInterface
}

// UserInterface has methods to work with User resources.
type UserInterface interface {
	Create(ctx context.Context, user *v1.User, opts metav1.CreateOptions) (*v1.User, error)
	Update(ctx context.Context, user *v1.User, opts metav1.UpdateOptions) (*v1.User, error)
	// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
	UpdateStatus(ctx context.Context, user *v1.User, opts metav1.UpdateOptions) (*v1.User, error)
	Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error
	DeleteCollection(ctx context.Context, opts metav1.DeleteOptions, listOpts metav1.ListOptions) error
	Get(ctx context.Context, name string, opts metav1.GetOptions) (*v1.User, error)
	List(ctx context.Context, opts metav1.ListOptions) (*v1.UserList, error)
	Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error)
	Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (result *v1.User, err error)
	GetProfile(ctx context.Context, userName string, options metav1.GetOptions) (*v1.UserProfile, error)
	ListClusters(ctx context.Context, userName string, options metav1.GetOptions) (*v1.UserClusters, error)
	ListAccessKeys(ctx context.Context, userName string, options metav1.GetOptions) (*v1.UserAccessKeys, error)

	UserExpansion
}

// users implements UserInterface
type users struct {
	*gentype.ClientWithList[*v1.User, *v1.UserList]
}

// newUsers returns a Users
func newUsers(c *ManagementV1Client) *users {
	return &users{
		gentype.NewClientWithList[*v1.User, *v1.UserList](
			"users",
			c.RESTClient(),
			scheme.ParameterCodec,
			"",
			func() *v1.User { return &v1.User{} },
			func() *v1.UserList { return &v1.UserList{} }),
	}
}

// GetProfile takes name of the user, and returns the corresponding v1.UserProfile object, and an error if there is any.
func (c *users) GetProfile(ctx context.Context, userName string, options metav1.GetOptions) (result *v1.UserProfile, err error) {
	result = &v1.UserProfile{}
	err = c.GetClient().Get().
		Resource("users").
		Name(userName).
		SubResource("profile").
		VersionedParams(&options, scheme.ParameterCodec).
		Do(ctx).
		Into(result)
	return
}

// ListClusters takes name of the user, and returns the corresponding v1.UserClusters object, and an error if there is any.
func (c *users) ListClusters(ctx context.Context, userName string, options metav1.GetOptions) (result *v1.UserClusters, err error) {
	result = &v1.UserClusters{}
	err = c.GetClient().Get().
		Resource("users").
		Name(userName).
		SubResource("clusters").
		VersionedParams(&options, scheme.ParameterCodec).
		Do(ctx).
		Into(result)
	return
}

// ListAccessKeys takes name of the user, and returns the corresponding v1.UserAccessKeys object, and an error if there is any.
func (c *users) ListAccessKeys(ctx context.Context, userName string, options metav1.GetOptions) (result *v1.UserAccessKeys, err error) {
	result = &v1.UserAccessKeys{}
	err = c.GetClient().Get().
		Resource("users").
		Name(userName).
		SubResource("accesskeys").
		VersionedParams(&options, scheme.ParameterCodec).
		Do(ctx).
		Into(result)
	return
}
