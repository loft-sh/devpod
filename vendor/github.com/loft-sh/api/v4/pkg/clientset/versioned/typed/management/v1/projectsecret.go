// Code generated by client-gen. DO NOT EDIT.

package v1

import (
	context "context"

	managementv1 "github.com/loft-sh/api/v4/pkg/apis/management/v1"
	scheme "github.com/loft-sh/api/v4/pkg/clientset/versioned/scheme"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	gentype "k8s.io/client-go/gentype"
)

// ProjectSecretsGetter has a method to return a ProjectSecretInterface.
// A group's client should implement this interface.
type ProjectSecretsGetter interface {
	ProjectSecrets(namespace string) ProjectSecretInterface
}

// ProjectSecretInterface has methods to work with ProjectSecret resources.
type ProjectSecretInterface interface {
	Create(ctx context.Context, projectSecret *managementv1.ProjectSecret, opts metav1.CreateOptions) (*managementv1.ProjectSecret, error)
	Update(ctx context.Context, projectSecret *managementv1.ProjectSecret, opts metav1.UpdateOptions) (*managementv1.ProjectSecret, error)
	Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error
	DeleteCollection(ctx context.Context, opts metav1.DeleteOptions, listOpts metav1.ListOptions) error
	Get(ctx context.Context, name string, opts metav1.GetOptions) (*managementv1.ProjectSecret, error)
	List(ctx context.Context, opts metav1.ListOptions) (*managementv1.ProjectSecretList, error)
	Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error)
	Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (result *managementv1.ProjectSecret, err error)
	ProjectSecretExpansion
}

// projectSecrets implements ProjectSecretInterface
type projectSecrets struct {
	*gentype.ClientWithList[*managementv1.ProjectSecret, *managementv1.ProjectSecretList]
}

// newProjectSecrets returns a ProjectSecrets
func newProjectSecrets(c *ManagementV1Client, namespace string) *projectSecrets {
	return &projectSecrets{
		gentype.NewClientWithList[*managementv1.ProjectSecret, *managementv1.ProjectSecretList](
			"projectsecrets",
			c.RESTClient(),
			scheme.ParameterCodec,
			namespace,
			func() *managementv1.ProjectSecret { return &managementv1.ProjectSecret{} },
			func() *managementv1.ProjectSecretList { return &managementv1.ProjectSecretList{} },
		),
	}
}
