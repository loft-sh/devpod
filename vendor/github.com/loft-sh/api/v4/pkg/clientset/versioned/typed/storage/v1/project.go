// Code generated by client-gen. DO NOT EDIT.

package v1

import (
	context "context"

	storagev1 "github.com/loft-sh/api/v4/pkg/apis/storage/v1"
	scheme "github.com/loft-sh/api/v4/pkg/clientset/versioned/scheme"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	gentype "k8s.io/client-go/gentype"
)

// ProjectsGetter has a method to return a ProjectInterface.
// A group's client should implement this interface.
type ProjectsGetter interface {
	Projects() ProjectInterface
}

// ProjectInterface has methods to work with Project resources.
type ProjectInterface interface {
	Create(ctx context.Context, project *storagev1.Project, opts metav1.CreateOptions) (*storagev1.Project, error)
	Update(ctx context.Context, project *storagev1.Project, opts metav1.UpdateOptions) (*storagev1.Project, error)
	// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
	UpdateStatus(ctx context.Context, project *storagev1.Project, opts metav1.UpdateOptions) (*storagev1.Project, error)
	Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error
	DeleteCollection(ctx context.Context, opts metav1.DeleteOptions, listOpts metav1.ListOptions) error
	Get(ctx context.Context, name string, opts metav1.GetOptions) (*storagev1.Project, error)
	List(ctx context.Context, opts metav1.ListOptions) (*storagev1.ProjectList, error)
	Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error)
	Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (result *storagev1.Project, err error)
	ProjectExpansion
}

// projects implements ProjectInterface
type projects struct {
	*gentype.ClientWithList[*storagev1.Project, *storagev1.ProjectList]
}

// newProjects returns a Projects
func newProjects(c *StorageV1Client) *projects {
	return &projects{
		gentype.NewClientWithList[*storagev1.Project, *storagev1.ProjectList](
			"projects",
			c.RESTClient(),
			scheme.ParameterCodec,
			"",
			func() *storagev1.Project { return &storagev1.Project{} },
			func() *storagev1.ProjectList { return &storagev1.ProjectList{} },
		),
	}
}
