name: aws
version: 0.0.1
description: |-
  DevPod on AWS
options:
  AWS_BINARY:
    description: Path to the aws binary
    default: aws
    before: init
  MACHINE_TYPE:
    description: The machine type to use.
    default: t3.medium
  DISK_IMAGE:
    description: The disk image to use
    default: ami-0d1ddd83282187d18
exec:
  init: |-
    # Create a security group for us to use
    SECURITY_GROUP_ID=$(${AWS_BINARY} ec2 describe-security-groups --filters "Name=tag:devpod,Values=devpod" | ${DEVPOD} helper json get 'SecurityGroups[0].GroupId')
    
    # Create security group id
    if [ -z ${SECURITY_GROUP_ID} ]; then
        echo "Creating security group devpod"
        ${AWS_BINARY} ec2 create-security-group \
                  --description "Default Security Group for DevPod" \
                  --group-name devpod \
                  --tag-specifications "ResourceType=security-group,Tags=[{Key=devpod,Value=devpod}]" > /dev/null
    
        SECURITY_GROUP_ID=$(${AWS_BINARY} ec2 describe-security-groups --filters "Name=tag:devpod,Values=devpod" | ${DEVPOD} helper json get 'SecurityGroups[0].GroupId')
    fi
    
    # Create security group rules
    SECURITY_GROUP_INGRESS_RULE_ID=$(${AWS_BINARY} ec2 describe-security-group-rules --filters "Name=tag:devpod,Values=devpod-ingress" | ${DEVPOD} helper json get 'SecurityGroupRules[0].SecurityGroupRuleId')
    if [ -z ${SECURITY_GROUP_INGRESS_RULE_ID} ]; then
        echo "Creating security group ingress rule devpod"
        ${AWS_BINARY} ec2 authorize-security-group-ingress \
                     --group-id "${SECURITY_GROUP_ID}" \
                     --protocol tcp \
                     --port 22 \
                     --cidr 0.0.0.0/0 \
                     --tag-specifications "ResourceType=security-group-rule,Tags=[{Key=devpod,Value=devpod-ingress}]" > /dev/null
    fi

  command: |-
    DESCRIBE_OUTPUT=$(${AWS_BINARY} ec2 describe-instances --filters "Name=tag:devpod,Values=${SERVER_ID}" "Name=instance-state-name,Values=pending,running,shutting-down,stopping,stopped")
    INSTANCE_ID=$(echo ${DESCRIBE_OUTPUT} | ${DEVPOD} helper json get 'Reservations[0].Instances[0].InstanceId')
    PUBLIC_DNS=$(echo ${DESCRIBE_OUTPUT} | ${DEVPOD} helper json get 'Reservations[0].Instances[0].NetworkInterfaces[0].Association.PublicDnsName')
    
    # make sure instance has public key
    ${AWS_BINARY} ec2-instance-connect send-ssh-public-key --instance-id ${INSTANCE_ID} \
                                                           --instance-os-user root \
                                                           --ssh-public-key "file://${SERVER_FOLDER}/id_devpod_rsa.pub" > /dev/null
    
    # run command remotely
    ${DEVPOD} helper ssh-client --address "${PUBLIC_DNS}:22" --key-file "${SERVER_FOLDER}/id_devpod_rsa" -- sh -c "${COMMAND}"
    

  create: |-
    SECURITY_GROUP_ID=$(${AWS_BINARY} ec2 describe-security-groups --filters "Name=tag:devpod,Values=devpod" | ${DEVPOD} helper json get 'SecurityGroups[0].GroupId')
    
    ${AWS_BINARY} ec2 run-instances --count 1 \
                                    --security-group-ids ${SECURITY_GROUP_ID} \
                                    --image-id ${DISK_IMAGE} \
                                    --instance-type ${MACHINE_TYPE} \
                                    --tag-specifications "ResourceType=instance,Tags=[{Key=devpod,Value=${SERVER_ID}}]" > /dev/null
  delete: |-
    ${AWS_BINARY} ec2 terminate-instances \
                  --instance-ids $(${AWS_BINARY} ec2 describe-instances --filters "Name=tag:devpod,Values=${SERVER_ID}" "Name=instance-state-name,Values=pending,running,shutting-down,stopping,stopped" | ${DEVPOD} helper json get 'Reservations[0].Instances[0].InstanceId') > /dev/null
  status: |-
    STATE=$(${AWS_BINARY} ec2 describe-instances \
                          --filters "Name=tag:devpod,Values=${SERVER_ID}" "Name=instance-state-name,Values=pending,running,shutting-down,stopping,stopped" | \
                          ${DEVPOD} helper json get 'Reservations[0].Instances[0].State.Name')
    if [ ! -z "${STATE}" ]; then
      if [ "${STATE}" = "running" ]; then
        echo "RUNNING"
      elif [ "${STATE}" = "stopped" ]; then
        echo "STOPPED"
      else
        echo "BUSY"
      fi
    else
      echo "NOTFOUND"
    fi
